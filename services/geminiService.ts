import { GoogleGenAI, Type, Modality } from "@google/genai";
import type { Platform, GeneratedPost } from '../types';

const responseSchema = {
    type: Type.OBJECT,
    properties: {
        caption: {
            type: Type.STRING,
            description: "The main text content for the social media post, optimized for the specified platform."
        },
        hashtags: {
            type: Type.ARRAY,
            items: {
                type: Type.STRING,
                description: "A relevant hashtag without the '#' symbol."
            },
            description: "An array of 3-5 relevant hashtags for the post."
        },
        imagePrompt: {
            type: Type.STRING,
            description: "A detailed, descriptive prompt for an AI image generator to create a visually appealing image that complements the post."
        }
    },
    required: ["caption", "hashtags", "imagePrompt"],
};


export const generateSocialMediaPost = async (
    idea: string,
    platform: Platform
): Promise<GeneratedPost> => {
    try {
        const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
        const fullPrompt = `
            Based on the following idea, create a social media post.
            **Idea:** "${idea}"
            **Platform Specific Instructions:** "${platform.promptSuffix}"
        `;
        
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: fullPrompt,
            config: {
                responseMimeType: 'application/json',
                responseSchema: responseSchema,
                temperature: 0.8,
                topP: 0.9,
            }
        });

        const jsonText = response.text.trim();
        const parsedJson = JSON.parse(jsonText);

        return {
            platformId: platform.id,
            caption: parsedJson.caption || 'No caption generated.',
            hashtags: parsedJson.hashtags || [],
            imagePrompt: parsedJson.imagePrompt || 'No image prompt generated.'
        };
    } catch (error) {
        console.error(`Error generating content for ${platform.name}:`, error);
        throw new Error(`Failed to generate content for ${platform.name}.`);
    }
};

export const generateImage = async (prompt: string): Promise<string> => {
    try {
        const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image',
            contents: {
                parts: [{ text: prompt }],
            },
            config: {
                responseModalities: [Modality.IMAGE],
            },
        });
        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
                const base64ImageBytes: string = part.inlineData.data;
                return `data:image/png;base64,${base64ImageBytes}`;
            }
        }
        throw new Error('No image was generated by the API.');
    } catch (error) {
        console.error('Error generating image:', error);
        throw new Error('Failed to generate image.');
    }
};
